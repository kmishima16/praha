-- ワークスペース1のデータ挿入
INSERT INTO channels_in_workspace (workspace_id, channel_id) VALUES 
    (1, 1),
    (1, 2),
    (1, 3),
    (1, 4),
    (1, 5);

-- user5はこのワークスペースに所属しない
INSERT INTO users_in_workspace (workspace_id, user_id) VALUES 
    (1, 1),
    (1, 2),
    (1, 3),
    (1, 4);
    
-- users_in_channelテーブルにデータを挿入
-- ユーザ4はチャンネル3に参加しない、他は全ユーザ参加
INSERT INTO users_in_channel (channel_id, user_id) VALUES 
    (1, 1),
    (1, 2),
    (1, 3),
    (1, 4),
    (2, 1),
    (2, 2),
    (2, 3),
    (2, 4),
    (3, 1),
    (3, 2),
    (3, 3),
    (4, 1),
    (4, 2),
    (4, 3),
    (4, 4),
    (5, 1),
    (5, 2),
    (5, 3),
    (5, 4);


-- チャンネル1(全ユーザ所属)のメッセージをINSERT
INSERT INTO `messages` (`workspace_id`, `channel_id`, `user_id`, `content`) VALUES
(1, 1, 1, 'Pythonって便利ですよね。'),
(1, 1, 2, 'はい、特にデータ処理が得意ですね。'),
(1, 1, 3, '私もPythonを使っています。'),
(1, 1, 4, '最近は機械学習のためにPythonを勉強中です。'),
(1, 1, 1, '機械学習、面白そうですね！'),
(1, 1, 1, 'Pythonの文法は比較的簡単ですよね。'),
(1, 1, 2, 'はい、他の言語と比べて読みやすいです。'),
(1, 1, 3, '私もPythonのシンプルさが好きです。'),
(1, 1, 4, 'データサイエンスにおいてPythonは欠かせませんね。'),
(1, 1, 3, 'そうですね、特にPandasやNumPyが強力ですね。');

-- チャンネル1のスレッドメッセージをINSERT
INSERT INTO `thread_messages` (`message_id`, `user_id`, `content`) VALUES
(1, 2, 'はい、Pandasはデータ処理に便利ですね。'),
(1, 3, '私もPandasを使っていますが、使いこなすのは難しいです。'),
(3, 4, '機械学習に関してはScikit-learnも優れていますね。'),
(5, 2, 'Scikit-learnは使いやすいですが、複雑なモデルに対応できるかが課題です。'),
(7, 1, 'Pythonのコミュニティも大きく、情報が豊富ですね。');

-- チャンネル2(全ユーザが所属)のメッセージをINSERT
INSERT INTO `messages` (`workspace_id`, `channel_id`, `user_id`, `content`) VALUES
(1, 2, 1, 'PythonでWebアプリケーションを開発しています。'),
(1, 2, 2, '本当ですか？私もやってみたいです。'),
(1, 2, 3, '私もWeb開発はPythonでやっています。'),
(1, 2, 4, 'DjangoとFlask、どちらを使っていますか？'),
(1, 2, 3, '私はDjangoを使っていますが、Flaskも興味があります。'),
(1, 2, 1, 'Flaskはシンプルで拡張性が高いですね。'),
(1, 2, 2, 'はい、私もFlaskの方が好きです。'),
(1, 2, 3, '私はDjangoが好きですが、Flaskも使いやすいですね。'),
(1, 2, 4, 'Djangoの方が大規模プロジェクトに向いていると思います。'),
(1, 2, 3, 'そうですね、DjangoのORMも便利ですね。');

-- チャンネル2のスレッドメッセージをINSERT
INSERT INTO `thread_messages` (`message_id`, `user_id`, `content`) VALUES
(11, 2, 'はい、FlaskのMicroframeworkのアプローチは素晴らしいですね。'),
(13, 3, 'DjangoのAdminサイトは便利ですが、カスタマイズが難しいです。'),
(15, 4, '私はDjango REST Frameworkを使ってAPIを開発しています。'),
(17, 3, 'FlaskのBlueprintsはアプリをモジュール化するのに便利ですね。'),
(19, 1, 'Djangoのセキュリティ機能は頼りになりますね。');

-- チャンネル3(ユーザ1,2,3)のメッセージをINSERT
INSERT INTO `messages` (`workspace_id`, `channel_id`, `user_id`, `content`) VALUES
(1, 3, 1, 'Pythonでのテストコードって書きやすいですよね。'),
(1, 3, 2, 'そうですね。特にpytestは便利です。'),
(1, 3, 3, '私もpytestを使っています。'),
(1, 3, 2, 'unittestも慣れてきましたが、pytestの方が断然楽ですね。'),
(1, 3, 1, 'pytest、使ってみようかな。'),
(1, 3, 1, 'モックを使ってテストするのも便利ですね。'),
(1, 3, 2, 'はい、モックはテストの効率化に役立ちます。'),
(1, 3, 3, 'モックは外部APIのテストなどで重宝しますね。'),
(1, 3, 3, '特に外部依存のあるテストではモックが重要です。'),
(1, 3, 2, '私も外部APIのテストでモックをよく使います。');

-- チャンネル3のスレッドメッセージをINSERT
INSERT INTO `thread_messages` (`message_id`, `user_id`, `content`) VALUES
(21, 2, 'モックはテストの独立性を高めるのに役立ちますね。'),
(23, 2, '外部APIのレスポンスをシミュレートするのも簡単ですね。'),
(25, 3, '私は外部APIとの統合テストでモックサーバーを使っています。'),
(27, 1, '外部APIの変更に影響を受けずにテストできるのがモックの利点ですね。'),
(29, 1, 'Mockingはテストの速度も向上させますね。');

-- チャンネル4(全ユーザ所属)のメッセージをINSERT
INSERT INTO `messages` (`workspace_id`, `channel_id`, `user_id`, `content`) VALUES
(1, 4, 1, 'Pythonでの並列処理、どうやっていますか？'),
(1, 4, 2, '私はmultiprocessingを使っています。'),
(1, 4, 3, '私はthreadingを使っていますが、GILの影響で速度が出ないですね。'),
(1, 4, 4, '私もmultiprocessingを使っています。'),
(1, 4, 2, 'GIL、厄介ですよね。'),
(1, 4, 1, 'GILを回避するために、multiprocessingを使うのが一般的ですね。'),
(1, 4, 2, 'はい、特にCPUバウンドな処理ではmultiprocessingが有効です。'),
(1, 4, 3, '私はI/Oバウンドな処理ではthreadingを使っています。'),
(1, 4, 4, 'GILの問題はCPythonに限定されるので、別の実装も検討できます。'),
(1, 4, 2, 'JythonやIronPythonなどの実装もありますね。');

-- チャンネル4のスレッドメッセージをINSERT
INSERT INTO `thread_messages` (`message_id`, `user_id`, `content`) VALUES
(31, 2, 'I/Oバウンドな処理ではGILの影響は少ないですね。'),
(33, 3, 'GILの問題はマルチスレッドのパフォーマンスに影響を与えますね。'),
(35, 4, '私はPythonの並列処理に関してはGILの影響を受けない方法を探しています。'),
(37, 1, 'JythonはJavaのライブラリを利用できるので便利ですね。'),
(39, 1, 'IronPythonは.NET Frameworkとの統合が強力ですね。');

-- チャンネル5(全ユーザ所属)のメッセージをINSERT
INSERT INTO `messages` (`workspace_id`, `channel_id`, `user_id`, `content`) VALUES
(1, 5, 1, 'Pythonでのエラーハンドリングって難しいですよね。'),
(1, 5, 2, 'はい、特に例外処理は慎重にやらないといけません。'),
(1, 5, 3, '私もエラーハンドリングには苦労しました。'),
(1, 5, 4, 'エラーハンドリングはベストプラクティスを学ぶのが大事ですね。'),
(1, 5, 1, 'そうですね。堅牢なコードを書くためには欠かせません。'),
(1, 5, 2, 'エラーハンドリングはテストも重要ですね。'),
(1, 5, 3, 'はい、エラーハンドリングのテストを十分に行うことが重要です。'),
(1, 5, 4, '私はコーナーケースのテストも重視しています。'),
(1, 5, 1, 'コーナーケースのテストは本番環境での予期せぬエラーを防ぎますね。'),
(1, 5, 2, 'そうですね、セキュリティも考慮したテストが必要です。');

-- チャンネル5のスレッドメッセージをINSERT
INSERT INTO `thread_messages` (`message_id`, `user_id`, `content`) VALUES
(41, 2, 'エラーハンドリングは予期しない問題に対処するために不可欠ですね。'),
(43, 3, 'エラーハンドリングのテストは極端な条件を考慮することも重要です。'),
(45, 4, 'セキュリティホールを見逃さないようにテストすることも大切です。'),
(47, 2, 'エラーハンドリングはアプリケーションの信頼性を高めますね。'),
(49, 1, '例外処理はプログラムの予期せぬ停止を防ぎます。');
